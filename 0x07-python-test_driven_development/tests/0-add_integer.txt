>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(3, 4)
7
>>> add_integer(3.0, 8)
11
>>> add_integer(3, 8.0)
11
>>> add_integer(3.0, 8.0)
11
>>> add_integer(3.0, "A")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 10, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer
>>> add_integer()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: add_integer() missing 1 required positional argument: 'a'
>>> type(add_integer(3.0, 8.0))
<class 'int'>
>>> add_integer("B", 8.0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 8, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer
